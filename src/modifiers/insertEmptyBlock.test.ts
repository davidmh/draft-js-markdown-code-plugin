import Draft, { EditorState, SelectionState } from 'draft-js'
import insertEmptyBlock from './insertEmptyBlock'

describe('insertEmptyBlock', () => {
  const testInsertEmptyBlock =
    (type = 'unstyled', data: Record<string, any> = {}) =>
    () => {
      const firstBlock: Draft.RawDraftContentBlock = {
        key: 'item1',
        text: 'asdf',
        type: 'unstyled',
        depth: 0,
        inlineStyleRanges: [
          {
            length: 2,
            offset: 1,
            style: 'ITALIC'
          }
        ],
        entityRanges: [],
        data: { foo: 'bar' }
      }
      const beforeRawContentState: Draft.RawDraftContentState = {
        entityMap: {},
        blocks: [firstBlock]
      }
      const afterRawContentState = {
        entityMap: {},
        blocks: [
          firstBlock,
          {
            // the key is generated by Draft
            text: '',
            type,
            depth: 0,
            inlineStyleRanges: [],
            entityRanges: [],
            data
          }
        ]
      }
      const contentState = Draft.convertFromRaw(beforeRawContentState)
      const selection = new SelectionState({
        anchorKey: 'item1',
        anchorOffset: 4,
        focusKey: 'item1',
        focusOffset: 4,
        isBackward: false,
        hasFocus: true
      })
      const editorState = EditorState.forceSelection(
        EditorState.createWithContent(contentState),
        selection
      )

      it('creates new code block', () => {
        const newEditorState = insertEmptyBlock(editorState, type, data)
        expect(newEditorState).not.toEqual(editorState)
        expect(
          Draft.convertToRaw(newEditorState.getCurrentContent())
        ).toMatchObject(afterRawContentState)
      })
    }

  describe('with arguments', testInsertEmptyBlock('header-one', { bar: 'baz' }))
  describe('without arguments', testInsertEmptyBlock())
})
